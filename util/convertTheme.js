/**
 * Due to the use of tree-sitter-highlight for syntax highlighting,
 * we cannot use JS/JSON theme systems such as those used by Prism or VS Code.
 * But we can try to convert the theme to a set of CSS classes.
 *
 * example usage:
 * node util/convertTheme.js node_modules/prism-react-renderer/themes/github/index.cjs.js
 */

import fs from "fs";
import path from "path";
const args = process.argv.slice(2);

tryOrExit(args.length !== 1, "Usage: node convertTheme.js <theme-file>");

const themeFile = args[0];
tryOrExit(
  !themeFile || !themeFile.endsWith(".js") /*, !themeFile.endsWith(".mjs") */,
  "theme-file must be a js file"
);
const themeFilePath = path.resolve(themeFile);
const theme = (await import(themeFilePath)).default;

const styles = [
  {
    types: ["source"],
    style: theme.plain, // for correct source bg color, add `display: "inline-block"` to the output .source class
  },
  ...theme.styles,
];

const stylesToClassNames = styles
  .map(({ types, style }) => {
    const classNames = types.map((t) => `.${t}`).join(", ");
    const properties = Object.entries(style)
      .map(([key, value]) => `${kebabCase(key)}: ${value};`)
      .join("\n  ");

    return `${classNames} {
  ${properties}
}`;
  })
  .join("\n");

const outputCss = `/* 
Autogenerated by minideck convertTheme.js from: ${themeFilePath}
*/

${stylesToClassNames}
`;

try {
  fs.writeFileSync(path.resolve("./code-theme.css"), outputCss);
  console.log("Successfully generated and wrote to code-theme.css");
} catch (e) {
  console.error(e);
  console.error("Unable to write to file system, outputting to console");
  console.log(outputCss);
  process.exit(1);
}

//////////////////////////////////* Utils *//////////////////////////////////
function tryOrExit(expressionOrFn, exitMessage) {
  try {
    if (expressionOrFn instanceof Function) {
      expressionOrFn();
    } else {
      if (expressionOrFn) throw new Error("tryOrExit failed evaluation");
    }
  } catch (e) {
    console.error(e.message);
    console.info(exitMessage);
    process.exit(1);
  }
}

// https://www.geeksforgeeks.org/how-to-convert-a-string-into-kebab-case-using-javascript/
function kebabCase(str) {
  return str
    .replace(/([a-z])([A-Z])/g, "$1-$2") // replace "camelCase" to "camel-case"
    .replace(/[\s_]+/g, "-") // Replace spaces with -
    .toLowerCase();
}
